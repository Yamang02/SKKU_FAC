# SKKU 미술동아리 갤러리 백엔드 리팩토링 통합 PRD

## 프로젝트 개요

### 배경
SKKU 미술동아리 갤러리는 성균관대학교 순수 미술 동아리 전시의 예술 작품을 전시하고 관리하는 웹 플랫폼입니다. 현재 기본 기능들이 모두 구현되어 운영 중이며, 백엔드 시스템의 코드 품질 향상, 아키텍처 개선, 유지보수성 강화를 위한 전면적인 리팩토링이 필요합니다.

### 리팩토링 범위
- **포함**: 백엔드 아키텍처, 비즈니스 로직, 데이터베이스 레이어, API 개선
- **제외**: 프론트엔드 UI/UX 변경, 템플릿 디자인 수정, 클라이언트 사이드 JavaScript

### 핵심 목표
1. **코드 품질 향상**: 일관된 아키텍처와 표준화된 코딩 패턴
2. **유지보수성 강화**: 테스트 가능하고 확장 가능한 구조
3. **성능 최적화**: 데이터베이스 쿼리 및 서버 리소스 최적화
4. **보안 강화**: 입력 검증 및 에러 처리 개선

## 현재 시스템 분석

### 기술 스택
- **Runtime**: Node.js 22.13.0
- **Framework**: Express.js with ECMAScript Modules (ESM)
- **Database**: MySQL with Sequelize ORM
- **Session**: Redis for session storage
- **Storage**: Cloudinary for image management
- **Template**: EJS for server-side rendering
- **Security**: Helmet, rate limiting, bcrypt

### 현재 아키텍처
```
src/
├── domain/                    # 도메인 중심 설계 (DDD)
│   ├── admin/                # 관리자 기능
│   ├── artwork/              # 작품 관리
│   ├── auth/                 # 인증/권한
│   ├── exhibition/           # 전시회 관리
│   ├── home/                 # 홈페이지
│   ├── image/                # 이미지 처리
│   └── user/                 # 사용자 관리
├── infrastructure/           # 인프라 계층
│   ├── cloudinary/          # 외부 서비스 연동
│   ├── db/                  # 데이터베이스 관련
│   │   ├── adapter/         # DB 어댑터
│   │   ├── repository/      # 레포지토리 패턴
│   │   └── model/           # 데이터 모델
│   └── session/             # 세션 관리
├── common/                  # 공통 유틸리티
│   ├── container/           # 의존성 주입 (신규)
│   ├── error/               # 에러 처리
│   ├── middleware/          # 미들웨어
│   └── utils/               # 유틸리티
├── config/                  # 설정 관리
└── views/                   # EJS 템플릿 (리팩토링 제외)
```

### 식별된 주요 문제점

#### 1. 의존성 주입 부재
- 서비스 클래스에서 직접 new 연산자로 의존성 생성
- 테스트 어려움과 결합도 증가
- 싱글톤 패턴 미적용으로 인한 메모리 비효율

#### 2. 에러 처리 시스템 미흡
- 컨트롤러에서 중복된 에러 처리 로직
- 일관성 없는 에러 응답 형식
- 에러 모니터링 및 알림 시스템 부족

#### 3. 비즈니스 로직 분산
- 일부 비즈니스 로직이 컨트롤러에 위치
- 서비스 레이어의 책임 불명확
- 트랜잭션 관리 부족

#### 4. 데이터 접근 패턴 개선 필요
- Repository 패턴의 일관성 부족
- 복잡한 쿼리의 성능 최적화 필요
- 데이터베이스 연결 관리 개선

#### 5. 설정 관리 및 환경 분리
- 환경별 설정 관리 체계 개선
- 민감 정보 보안 강화
- 설정 검증 및 기본값 처리

## 백엔드 리팩토링 세부 계획

### Phase 1: 기반 인프라 개선 (진행 중)
#### 1.1 의존성 주입 컨테이너 구축 ✅
- IoC Container 구현
- 서비스 등록 및 라이프사이클 관리
- 자동 와이어링 시스템

#### 1.2 중앙집중식 에러 처리 미들웨어 개선 ✅ **완료**
- BaseError 클래스 체계 구축 ✅
- 통합 ErrorHandler 미들웨어 ✅
- 일관된 에러 응답 형식 정의 ✅
- 에러 처리 설정 및 커스터마이징 기능 ✅
- 에러 모니터링 및 알림 시스템 연동 ✅

#### 1.3 로깅 시스템 완전 통합
- 백엔드 Logger 클래스 활용 극대화
- 구조화된 로깅 (JSON 형태)
- 로그 레벨별 분리 및 파일 로테이션

#### 1.4 환경 설정 관리 개선
- 환경별 설정 파일 체계화
- 설정 검증 및 기본값 처리
- 민감 정보 보안 강화

### Phase 2: 도메인별 비즈니스 로직 리팩토링
#### 2.1 User 도메인 리팩토링
- UserService 비즈니스 로직 정리
- 사용자 검증 로직 표준화
- 패스워드 보안 정책 강화

#### 2.2 Auth 도메인 리팩토링
- 인증 미들웨어 최적화
- 세션 관리 로직 개선
- 권한 검증 시스템 표준화

#### 2.3 Artwork 도메인 리팩토링
- 작품 관리 비즈니스 로직 정리
- 이미지 처리 워크플로우 최적화
- 메타데이터 관리 개선

#### 2.4 Exhibition 도메인 리팩토링
- 전시회 관리 로직 개선
- 작품-전시회 관계 관리 최적화
- 상태 관리 시스템 표준화

#### 2.5 Admin 도메인 리팩토링
- 관리자 기능 권한 체계 개선
- 대량 작업 처리 최적화
- 감사 로그 시스템 구축

### Phase 3: 데이터 레이어 최적화
#### 3.1 Repository 패턴 표준화
- 일관된 Repository 인터페이스
- 복잡한 쿼리 최적화
- 페이징 및 정렬 표준화

#### 3.2 트랜잭션 관리 개선
- 비즈니스 단위별 트랜잭션 관리
- 롤백 전략 구현
- 데드락 방지 로직

#### 3.3 데이터베이스 성능 최적화
- 인덱스 최적화
- 쿼리 성능 모니터링
- 연결 풀 설정 최적화

### Phase 4: API 레이어 표준화
#### 4.1 API 응답 표준화
- 일관된 응답 형식 구축
- 페이징 응답 표준화
- 에러 응답 표준화

#### 4.2 미들웨어 체인 최적화
- 공통 미들웨어 정리
- 성능 최적화
- 보안 미들웨어 강화

#### 4.3 요청 검증 강화
- DTO 기반 입력 검증
- 스키마 검증 시스템
- 보안 검증 강화

### Phase 5: 테스트 및 모니터링
#### 5.1 단위 테스트 구축
- 서비스 레이어 테스트
- Repository 테스트
- 미들웨어 테스트

#### 5.2 통합 테스트 구축
- API 엔드포인트 테스트
- 데이터베이스 통합 테스트
- 에러 시나리오 테스트

#### 5.3 모니터링 시스템
- 성능 메트릭 수집
- 에러 모니터링
- 리소스 사용량 추적

## 기술적 요구사항

### 의존성 주입 시스템
```javascript
// 컨테이너 기반 의존성 관리
const container = new Container();
container.register('UserService', UserService, { singleton: true });
container.register('UserRepository', UserRepository, { singleton: true });

// 자동 와이어링
const userController = container.resolve('UserController');
```

### 에러 처리 시스템
```javascript
// 표준화된 에러 클래스
class UserNotFoundError extends BaseError {
  constructor(userId) {
    super(`사용자를 찾을 수 없습니다: ${userId}`, 'USER_NOT_FOUND', 404);
  }
}

// 중앙집중식 에러 처리
app.use(ErrorHandler.create({
  isDevelopment: process.env.NODE_ENV === 'development',
  enableDetailedLogging: true
}));
```

### Repository 패턴
```javascript
class UserRepository {
  async findById(id) {
    return await User.findByPk(id);
  }

  async findByEmail(email) {
    return await User.findOne({ where: { email } });
  }
}
```

## 우선순위 및 일정

### 높은 우선순위 (즉시 완료)
1. ✅ 의존성 주입 컨테이너 구축 (완료)
2. ✅ 중앙집중식 에러 처리 시스템 (완료)
3. 📋 로깅 시스템 완전 통합 (다음 작업)

### 중간 우선순위 (2주 내)
1. User 도메인 리팩토링
2. Auth 도메인 리팩토링
3. Repository 패턴 표준화

### 낮은 우선순위 (1개월 내)
1. 나머지 도메인 리팩토링 (Artwork, Exhibition, Admin)
2. 성능 최적화 및 테스트 코드 작성
3. 모니터링 시스템 구축

## 성공 지표

### 코드 품질 지표
- **코드 중복률**: 50% 감소 목표
- **순환 복잡도**: 30% 감소 목표
- **테스트 커버리지**: 80% 이상 달성
- **ESLint 경고**: 90% 감소

### 성능 지표
- **API 응답 시간**: 20% 개선
- **메모리 사용량**: 15% 감소
- **데이터베이스 쿼리 수**: 30% 감소
- **에러 발생률**: 50% 감소

### 유지보수성 지표
- **새 기능 개발 시간**: 40% 단축
- **버그 수정 시간**: 50% 단축
- **코드 리뷰 시간**: 30% 단축
- **배포 빈도**: 2배 증가

## 위험 요소 및 대응 방안

### 기술적 위험
- **대규모 리팩토링으로 인한 버그**: 점진적 리팩토링 + 철저한 테스트
- **기존 기능 호환성 문제**: 하위 호환성 유지 + 단계적 전환
- **성능 저하 가능성**: 성능 모니터링 + 벤치마크 테스트

### 운영 위험
- **서비스 중단**: 무중단 배포 전략 + 롤백 계획
- **데이터 손실**: 백업 전략 + 마이그레이션 테스트
- **보안 취약점**: 보안 테스트 + 코드 리뷰 강화

### 프로젝트 위험
- **일정 지연**: 우선순위 기반 점진적 접근
- **리소스 부족**: 자동화 도구 활용 + 문서화 강화

## 배제 사항 (프론트엔드 관련)

다음 항목들은 이번 백엔드 리팩토링 범위에서 **명시적으로 제외**됩니다:

### UI/UX 개선 제외
- EJS 템플릿 디자인 변경
- CSS 스타일링 수정
- 클라이언트 사이드 JavaScript 개선
- 모바일 반응형 디자인 개선

### 프론트엔드 성능 제외
- 이미지 지연 로딩 구현
- CSS/JS 번들 최적화
- 브라우저 캐싱 전략
- Progressive Web App 기능

### 사용자 인터페이스 제외
- 사용자 경험(UX) 개선
- 접근성(Accessibility) 향상
- 인터렌션 디자인 개선
- 프론트엔드 에러 메시지 개선

### 클라이언트 기능 제외
- 실시간 알림 시스템 (클라이언트 부분)
- 고급 검색 UI 개선
- 소셜 공유 기능 개선
- 클라이언트 사이드 상태 관리

## 결론

이 백엔드 리팩토링 프로젝트를 통해 SKKU 미술동아리 갤러리의 서버 사이드 아키텍처를 현대적이고 유지보수 가능한 구조로 개선하여, 향후 기능 확장과 성능 최적화의 견고한 기반을 마련할 것입니다.

프론트엔드 개선은 별도의 프로젝트로 진행하며, 백엔드 API의 안정성과 성능이 확보된 후 착수할 예정입니다.
