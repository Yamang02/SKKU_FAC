---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---
네이밍 룰
1. 기본 네이밍 규칙

이름은 영문 소문자, 숫자, 언더스코어(_) 조합 사용

이름은 반드시 영문 소문자로 시작

약속어를 준수하여 레이아웃, 객체, 이미지, 폴더, 파일 명명

공통 요소 약속어(.u_)는 공통 업무 담당자만 사용 가능

예시:

잘못된 예: Btn, 2btn, btn, btn

올바른 예: btn, btn2, section_list

2. ID 및 CLASS 네이밍 규칙

A. ID 사용 규칙

ID는 문서 전체에서 유일한 고유 식별자로 사용.

ID는 레이아웃을 제외하고 스타일을 지정하지 않음.

레이아웃 예약 ID

#wrap : 페이지 전체 영역

#header : 머리글 영역

#container : 본문 영역

#content : 주요 콘텐츠 영역

#footer : 바닥글 영역

B. CLASS 사용 규칙

CLASS는 문서에서 여러 번 사용할 수 있음.

개발과 연동되는 동적 객체는 ID 대신 CLASS를 사용.

팝업, iframe에서도 동일한 규칙 적용.

C. CLASS 네이밍 확장

종속 확장 CLASS

.mykin_list a { font-size: 12px; line-height: 14px; font-weight: bold; }
.mykin_list_v1 a { color: #f00; }
.mykin_list_v2 a { color: #03f; }

<div class="mykin_list"><a href="#">바로가기</a></div>
<div class="mykin_list mykin_list_v1"><a href="#">바로가기</a></div>
<div class="mykin_list mykin_list_v2"><a href="#">바로가기</a></div>

독립 확장 CLASS

<ul class="mykin_list2">
  <li>리스트1</li>
</ul>
<ul class="mykin_list3">
  <li>리스트1</li>
</ul>

3. 이미지 네이밍 규칙

이미지 이름은 형태_의미_상태 순서로 조합

같은 분류의 이미지가 두 개 이상이면 파일명 마지막에 숫자 추가.

임시 이미지는 tmp_를 접두사로 사용.

예시:

잘못된 예: on_recommend_tab1.gif, bnm.gif, btn_Search.gif, 1btn_search.gif

올바른 예: tab1_recomm_on.gif, btn_naver_mail.gif, btn_srch.gif

4. 파일 및 폴더 네이밍 규칙

A. HTML 파일

서비스이름.html 형태 사용 (예: news.html)

팝업 파일: pop_*.html (예: pop_notice.html)

iframe 파일: ifr_*.html (예: ifr_login.html)

Include 파일: inc_*.html (예: inc_footer.html)

임시 파일: tmp_*.html (예: tmp_test.html)

B. CSS 파일

서비스이름.css 사용 (예: news.css)

모바일 예외 대응: 서비스이름_e.css (예: news_e.css)

C. 폴더 구조

신규 프로젝트 작업: p_yymmdd_프로젝트이름

유지보수 작업: s_yymmdd_서스테이닝이름

공통 폴더: img, css, js

HTML 파일의 폴더 분류가 필요한 경우: p_yymmdd_프로젝트명\메뉴명

임시 폴더: tmp_


# SKKU Faculty Gallery - CSS 스타일 가이드

이 문서는 SKKU Faculty Gallery 프로젝트의 CSS 코딩 스타일과 구조에 대한 가이드라인을 제공합니다.

## 목차

1. [디렉토리 구조](mdc:SKKU_FAC_GALLERY/#디렉토리-구조)
2. [네이밍 컨벤션](mdc:SKKU_FAC_GALLERY/#네이밍-컨벤션)
3. [코드 포맷팅](mdc:SKKU_FAC_GALLERY/#코드-포맷팅)
4. [CSS 모듈화](mdc:SKKU_FAC_GALLERY/#css-모듈화)
5. [변수 사용](mdc:SKKU_FAC_GALLERY/#변수-사용)
6. [미디어 쿼리](mdc:SKKU_FAC_GALLERY/#미디어-쿼리)
7. [유틸리티 클래스](mdc:SKKU_FAC_GALLERY/#유틸리티-클래스)
8. [주석 작성](mdc:SKKU_FAC_GALLERY/#주석-작성)

## 디렉토리 구조

CSS 파일은 다음과 같은 구조로 구성됩니다:

```
src/presentation/css/
├── base/                  # 기본 스타일 (변수, 리셋, 타이포그래피)
│   ├── variables.css      # CSS 변수 정의
│   ├── reset.css          # 브라우저 기본 스타일 초기화
│   ├── typography.css     # 텍스트 관련 스타일
│   └── media-queries.css  # 미디어 쿼리 브레이크포인트
├── utils/                 # 유틸리티 클래스
│   ├── helpers.css        # 헬퍼 클래스
│   ├── animations.css     # 애니메이션 관련 스타일
│   └── common.css         # 공통 유틸리티 클래스
├── components/            # 재사용 가능한 UI 컴포넌트
│   ├── header.css         # 헤더 컴포넌트
│   ├── footer.css         # 푸터 컴포넌트
│   ├── button.css         # 버튼 컴포넌트
│   └── ...
├── layouts/               # 레이아웃 관련 스타일
│   ├── main.css           # 메인 레이아웃
│   ├── grid.css           # 그리드 시스템
│   └── container.css      # 컨테이너 스타일
├── pages/                 # 페이지별 스타일
│   ├── home.css           # 홈페이지 스타일
│   ├── artwork-list.css   # 작품 목록 페이지 스타일
│   ├── artwork-detail/    # 작품 상세 페이지 스타일 (모듈화)
│   │   ├── _layout.css    # 레이아웃 관련 스타일
│   │   ├── _details.css   # 상세 정보 관련 스타일
│   │   ├── _comments.css  # 댓글 섹션 관련 스타일
│   │   └── _related.css   # 관련 작품 섹션 관련 스타일
│   └── artwork-detail.css # 작품 상세 페이지 진입점
└── style.css              # 메인 스타일 시트 (모든 스타일 임포트)
```

## 네이밍 컨벤션

### BEM(Block Element Modifier) 방식 사용

```css
/* Block */
.card { }

/* Element */
.card__title { }
.card__image { }

/* Modifier */
.card--featured { }
.card__title--large { }
```

### 모듈화된 파일 네이밍

- 모듈화된 파일은 언더스코어(`_`)로 시작합니다.
- 예: `_layout.css`, `_details.css`

### 클래스 네이밍 규칙

- 모든 클래스 이름은 소문자와 하이픈(`-`)을 사용합니다.
- 의미 있는 이름을 사용합니다.
- 약어보다는 전체 단어를 사용합니다.

**좋은 예:**
```css
.artwork-detail-container { }
.comment-input-wrapper { }
```

**나쁜 예:**
```css
.artDtlCont { }
.cmnt_inpt_wrpr { }
```

## 코드 포맷팅

### 들여쓰기

- 4칸 스페이스 또는 탭을 사용합니다.
- 일관성을 유지합니다.

### 속성 선언 순서

속성은 다음 순서로 정렬합니다:

1. 포지셔닝 (position, top, right, bottom, left, z-index)
2. 박스 모델 (display, width, height, margin, padding)
3. 타이포그래피 (font, line-height, text-align, color)
4. 시각적 효과 (background, border, box-shadow)
5. 기타 (transform, transition, animation)

```css
.example {
    /* 포지셔닝 */
    position: absolute;
    top: 0;
    right: 0;
    
    /* 박스 모델 */
    display: flex;
    width: 100%;
    padding: 10px;
    
    /* 타이포그래피 */
    font-size: 1rem;
    color: #333;
    
    /* 시각적 효과 */
    background-color: #fff;
    border: 1px solid #eee;
    
    /* 기타 */
    transition: all 0.3s ease;
}
```

### 선택자 작성

- 선택자는 가능한 짧게 유지합니다.
- 과도한 중첩을 피합니다 (최대 3단계).
- ID 선택자 사용을 최소화합니다.

## CSS 모듈화

### 파일 분리 기준

- 기능 또는 컴포넌트 단위로 파일을 분리합니다.
- 파일 크기가 300줄을 초과하면 분리를 고려합니다.
- 관련 스타일은 같은 파일에 유지합니다.

### 임포트 순서

`style.css`에서 다음 순서로 파일을 임포트합니다:

1. Base (변수, 리셋, 타이포그래피)
2. Utils (헬퍼, 애니메이션)
3. Components (UI 컴포넌트)
4. Layouts (레이아웃)
5. Pages (페이지별 스타일)

## 변수 사용

### CSS 변수 정의

모든 글로벌 변수는 `base/variables.css` 파일에 정의합니다:

```css
:root {
    /* Colors */
    --primary-color: #004C3F;
    --secondary-color: #465B63;
    
    /* Spacing */
    --spacing-xs: 4px;
    --spacing-sm: 8px;
    --spacing-md: 16px;
    --spacing-lg: 24px;
    --spacing-xl: 32px;
}
```

### 변수 사용 방법

```css
.button {
    background-color: var(--primary-color);
    padding: var(--spacing-md) var(--spacing-lg);
}
```

## 미디어 쿼리

### 브레이크포인트

일관된 브레이크포인트를 사용합니다:

```css
/* 모바일 */
@media (max-width: 768px) { }

/* 태블릿 */
@media (max-width: 1023px) { }

/* 소형 데스크톱 */
@media (max-width: 1200px) { }

/* 대형 데스크톱 */
@media (max-width: 1600px) { }
```

### 미디어 쿼리 위치

- 컴포넌트별 미디어 쿼리는 해당 컴포넌트 파일 내에 배치합니다.
- 글로벌 미디어 쿼리는 `base/media-queries.css`에 정의합니다.

## 유틸리티 클래스

### 유틸리티 클래스 사용

유틸리티 클래스는 `utils/common.css`에 정의되어 있으며, 다음과 같은 카테고리로 구성됩니다:

1. 이미지 스타일 (`.img-fluid`, `.img-rounded`)
2. 배경 색상 (`.bg-primary`, `.bg-secondary`)
3. 테두리 스타일 (`.border`, `.rounded`)
4. 레이아웃 유틸리티 (`.d-flex`, `.position-relative`)
5. 접근성 (`.sr-only`)
6. 플렉스 유틸리티 (`.flex-row`, `.justify-content-center`)
7. 여백 유틸리티 (`.m-1`, `.p-2`)
8. 텍스트 유틸리티 (`.text-center`, `.text-primary`)

### 유틸리티 클래스 확장

새로운 유틸리티 클래스를 추가할 때는 기존 패턴을 따르고, 적절한 카테고리에 배치합니다.

## 주석 작성

### 파일 헤더 주석

모든 CSS 파일은 다음과 같은 헤더 주석으로 시작합니다:

```css
/* 
 * 파일 이름 - 간략한 설명
 * 
 * 이 파일은 무엇을 하는지에 대한 자세한 설명을 작성합니다.
 */
```

### 섹션 주석

주요 섹션은 다음과 같이 구분합니다:

```css
/* -----------------------------------------------------------------------------
 * 섹션 이름
 * -------------------------------------------------------------------------- */
```

### 일반 주석

일반적인 설명은 다음과 같이 작성합니다:

```css
/* 이 스타일은 특정 상황에서만 적용됩니다 */
.special-case {
    color: red;
}
```

---

이 가이드라인을 따르면 CSS 코드의 일관성과 유지보수성을 향상시킬 수 있습니다. 모든 팀원은 이 가이드를 참조하여 코드를 작성해 주세요.