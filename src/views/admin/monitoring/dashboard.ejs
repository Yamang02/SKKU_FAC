<div class="admin-dashboard">
  <h1 class="admin-dashboard__title">모니터링 대시보드</h1>

  <!-- 시스템 상태 섹션 -->
  <div class="admin-dashboard__stats">
    <div class="admin-dashboard__stat adminCard">
      <h3 class="admin-dashboard__stat-title adminCardTitle">시스템 가동시간</h3>
      <p class="admin-dashboard__stat-value" id="uptime">
        <%= Math.floor(metrics.uptime / 60) %>분
      </p>
    </div>
    <div class="admin-dashboard__stat adminCard">
      <h3 class="admin-dashboard__stat-title adminCardTitle">총 HTTP 요청</h3>
      <p class="admin-dashboard__stat-value" id="httpRequests"><%= metrics.httpRequestsTotal %></p>
    </div>
    <div class="admin-dashboard__stat adminCard">
      <h3 class="admin-dashboard__stat-title adminCardTitle">에러 발생 수</h3>
      <p class="admin-dashboard__stat-value" id="errors"><%= metrics.errorsTotal %></p>
    </div>
    <div class="admin-dashboard__stat adminCard">
      <h3 class="admin-dashboard__stat-title adminCardTitle">활성 연결</h3>
      <p class="admin-dashboard__stat-value" id="activeConnections">
        <%= metrics.activeConnections %>
      </p>
    </div>
  </div>

  <div class="admin-dashboard__row">
    <!-- 메모리 사용량 섹션 -->
    <div class="admin-dashboard__recent adminCard">
      <h2 class="admin-title">메모리 사용량</h2>
      <div class="admin-dashboard__activities">
        <div class="admin-dashboard__activity">
          <i class="fas fa-memory"></i>
          <span>RSS 메모리</span>
          <small> <%= Math.round(metrics.memoryUsage.rss / 1024 / 1024) %> MB </small>
        </div>
        <div class="admin-dashboard__activity">
          <i class="fas fa-chart-pie"></i>
          <span>Heap 사용량</span>
          <small> <%= Math.round(metrics.memoryUsage.heapUsed / 1024 / 1024) %> MB </small>
        </div>
        <div class="admin-dashboard__activity">
          <i class="fas fa-chart-area"></i>
          <span>Heap 총량</span>
          <small> <%= Math.round(metrics.memoryUsage.heapTotal / 1024 / 1024) %> MB </small>
        </div>
        <div class="admin-dashboard__activity">
          <i class="fas fa-external-link-alt"></i>
          <span>External 메모리</span>
          <small> <%= Math.round(metrics.memoryUsage.external / 1024 / 1024) %> MB </small>
        </div>
      </div>
    </div>

    <!-- 시스템 상태 섹션 -->
    <div class="admin-dashboard__notices adminCard">
      <h2 class="admin-title">시스템 상태</h2>
      <div class="admin-dashboard__notices-list">
        <div class="admin-dashboard__notice">
          <h3><i class="fas fa-database text-green"></i> 데이터베이스</h3>
          <span class="admin-status-active">연결됨</span>
        </div>
        <div class="admin-dashboard__notice">
          <h3><i class="fas fa-server text-green"></i> Redis</h3>
          <span class="admin-status-active">연결됨</span>
        </div>
        <div class="admin-dashboard__notice">
          <h3><i class="fas fa-cloud text-green"></i> Cloudinary</h3>
          <span class="admin-status-active">정상</span>
        </div>
        <div class="admin-dashboard__notice">
          <h3><i class="fas fa-bug text-blue"></i> 에러 추적</h3>
          <span class="admin-status-info">Sentry 활성화</span>
        </div>
      </div>
    </div>
  </div>

  <!-- 실시간 메트릭 차트 섹션 -->
  <div class="admin-dashboard__recent-artworks adminCard">
    <h2 class="admin-title">실시간 모니터링</h2>
    <div class="monitoring-controls">
      <button id="refreshMetrics" class="admin-btn admin-btn-sm">
        <i class="fas fa-sync-alt"></i> 새로고침
      </button>
      <button id="toggleAutoRefresh" class="admin-btn admin-btn-sm">
        <i class="fas fa-play"></i> 자동 새로고침
      </button>
      <span id="lastUpdate">마지막 업데이트: <%= timestamp %></span>
    </div>

    <!-- 간단한 메트릭 표시 -->
    <div class="metrics-display">
      <div class="metric-item">
        <h4>평균 응답 시간</h4>
        <div class="metric-bar">
          <div class="metric-fill" style="width: 30%"></div>
        </div>
        <span id="avgResponseTime"> < 100ms</span>
      </div>
      <div class="metric-item">
        <h4>CPU 사용률</h4>
        <div class="metric-bar">
          <div class="metric-fill" style="width: 15%"></div>
        </div>
        <span id="cpuUsage">15%</span>
      </div>
      <div class="metric-item">
        <h4>에러율</h4>
        <div class="metric-bar error">
          <div class="metric-fill" style="width: 2%"></div>
        </div>
        <span id="errorRate">0.2%</span>
      </div>
    </div>
  </div>

  <!-- 빠른 액션 섹션 -->
  <div class="admin-dashboard__quick-actions adminCard">
    <h2 class="admin-title">빠른 액션</h2>
    <div class="quick-actions-grid">
      <a href="/metrics" class="admin-btn admin-btn-primary" target="_blank">
        <i class="fas fa-chart-line"></i> Prometheus 메트릭 보기
      </a>
      <a href="/health" class="admin-btn admin-btn-success" target="_blank">
        <i class="fas fa-heartbeat"></i> 헬스체크
      </a>
      <button id="clearMetrics" class="admin-btn admin-btn-warning">
        <i class="fas fa-trash"></i> 메트릭 초기화
      </button>
      <a href="/admin/logs" class="admin-btn admin-btn-info">
        <i class="fas fa-file-alt"></i> 로그 보기
      </a>
    </div>
  </div>
</div>

<style>
  .monitoring-controls {
    display: flex;
    gap: 10px;
    align-items: center;
    margin-bottom: 20px;
    padding: 15px;
    background: #f8f9fa;
    border-radius: 8px;
  }

  .monitoring-controls #lastUpdate {
    margin-left: auto;
    font-size: 0.9em;
    color: #666;
  }

  .metrics-display {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
    margin-bottom: 20px;
  }

  .metric-item h4 {
    margin: 0 0 10px 0;
    font-size: 1.1em;
    color: #333;
  }

  .metric-bar {
    width: 100%;
    height: 20px;
    background: #e9ecef;
    border-radius: 10px;
    overflow: hidden;
    margin-bottom: 5px;
  }

  .metric-fill {
    height: 100%;
    background: linear-gradient(90deg, #28a745, #20c997);
    transition: width 0.3s ease;
  }

  .metric-bar.error .metric-fill {
    background: linear-gradient(90deg, #dc3545, #fd7e14);
  }

  .text-green {
    color: #28a745;
  }

  .text-blue {
    color: #007bff;
  }

  .text-red {
    color: #dc3545;
  }

  .admin-status-active {
    color: #28a745;
    font-weight: bold;
  }

  .admin-status-info {
    color: #007bff;
    font-weight: bold;
  }

  .quick-actions-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 15px;
    margin-top: 15px;
  }

  .admin-btn-primary {
    background: #007bff;
    color: white;
  }

  .admin-btn-success {
    background: #28a745;
    color: white;
  }

  .admin-btn-warning {
    background: #ffc107;
    color: #212529;
  }

  .admin-btn-info {
    background: #17a2b8;
    color: white;
  }

  #autoRefreshIndicator {
    display: inline-block;
    width: 8px;
    height: 8px;
    background: #28a745;
    border-radius: 50%;
    margin-left: 5px;
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0% {
      opacity: 1;
    }

    50% {
      opacity: 0.5;
    }

    100% {
      opacity: 1;
    }
  }
</style>

<script>
  let autoRefreshInterval = null;
  let isAutoRefreshing = false;

  // 메트릭 새로고침
  async function refreshMetrics() {
    try {
      const response = await fetch('/api/monitoring/metrics');
      const data = await response.json();

      if (data.success) {
        updateMetricsDisplay(data.data);
        document.getElementById('lastUpdate').textContent =
          '마지막 업데이트: ' + new Date().toLocaleTimeString('ko-KR');
      }
    } catch (error) {
      console.error('메트릭 새로고침 실패:', error);
    }
  }

  // 메트릭 표시 업데이트
  function updateMetricsDisplay(metrics) {
    document.getElementById('uptime').textContent = Math.floor(metrics.uptime / 60) + '분';
    document.getElementById('httpRequests').textContent = metrics.httpRequestsTotal;
    document.getElementById('errors').textContent = metrics.errorsTotal;
    document.getElementById('activeConnections').textContent = metrics.activeConnections;
  }

  // 자동 새로고침 토글
  function toggleAutoRefresh() {
    const button = document.getElementById('toggleAutoRefresh');

    if (isAutoRefreshing) {
      clearInterval(autoRefreshInterval);
      button.innerHTML = '<i class="fas fa-play"></i> 자동 새로고침';
      button.classList.remove('admin-btn-warning');
      button.classList.add('admin-btn-sm');
      isAutoRefreshing = false;
    } else {
      autoRefreshInterval = setInterval(refreshMetrics, 30000); // 30초마다
      button.innerHTML =
        '<i class="fas fa-pause"></i> 자동 새로고침 중 <span id="autoRefreshIndicator"></span>';
      button.classList.remove('admin-btn-sm');
      button.classList.add('admin-btn-warning');
      isAutoRefreshing = true;
    }
  }

  // 이벤트 리스너
  document.addEventListener('DOMContentLoaded', function () {
    document.getElementById('refreshMetrics').addEventListener('click', refreshMetrics);
    document.getElementById('toggleAutoRefresh').addEventListener('click', toggleAutoRefresh);

    // 메트릭 초기화 (확인 후)
    document.getElementById('clearMetrics').addEventListener('click', function () {
      if (confirm('정말로 메트릭을 초기화하시겠습니까?')) {
        fetch('/api/monitoring/metrics/reset', { method: 'POST' })
          .then(() => {
            alert('메트릭이 초기화되었습니다.');
            refreshMetrics();
          })
          .catch(err => console.error('메트릭 초기화 실패:', err));
      }
    });
  });
</script>
