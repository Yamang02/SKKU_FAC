name: 🧪 Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '22.13.0'

jobs:
  integration-tests:
    name: 🐳 Docker Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: skku_sfa_gallery_test
          MYSQL_USER: skku_sfa_gallery_test
          MYSQL_PASSWORD: test_password
        ports:
          - 3307:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6380:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: 🔧 Setup test environment
        run: |
          # Create test environment file
          cat > .env.test << EOF
          NODE_ENV=test
          PORT=3000

          # Database Configuration (Test)
          DB_HOST=localhost
          DB_PORT=3307
          DB_NAME=skku_sfa_gallery_test
          DB_USER=skku_sfa_gallery_test
          DB_PASSWORD=test_password

          # Redis Configuration (Test)
          REDIS_HOST=localhost
          REDIS_PORT=6380
          REDIS_DB=0

          # Session Configuration
          SESSION_SECRET=test_session_secret_key_for_ci

          # Security
          JWT_SECRET=test_jwt_secret_key_for_ci

          # Cloudinary (Test/Mock)
          CLOUDINARY_CLOUD_NAME=test_cloud
          CLOUDINARY_API_KEY=test_api_key
          CLOUDINARY_API_SECRET=test_api_secret

          # Email (Test/Mock)
          EMAIL_HOST=smtp.test.com
          EMAIL_PORT=587
          EMAIL_USER=test@test.com
          EMAIL_PASS=test_password

          # Application
          BASE_URL=http://localhost:3000
          EOF

      - name: ⏳ Wait for services
        run: |
          echo "Waiting for MySQL to be ready..."
          timeout 60 bash -c 'until mysqladmin ping -h localhost -P 3307 -u root -proot_password --silent; do sleep 1; done'

          echo "Waiting for Redis to be ready..."
          timeout 60 bash -c 'until redis-cli -h localhost -p 6380 ping; do sleep 1; done'

          echo "Services are ready!"

      - name: 🗄️ Setup test database
        run: |
          # Create database schema
          mysql -h localhost -P 3307 -u root -proot_password -e "
          CREATE DATABASE IF NOT EXISTS skku_sfa_gallery_test;
          GRANT ALL PRIVILEGES ON skku_sfa_gallery_test.* TO 'skku_sfa_gallery_test'@'%';
          FLUSH PRIVILEGES;
          "

      - name: 🚀 Start application
        run: |
          # Start the application in background
          NODE_ENV=test npm start &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV

          # Wait for application to be ready
          echo "Waiting for application to start..."
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'
          echo "Application is ready!"

      - name: 🧪 Run Playwright tests
        run: npm run test:docker
        env:
          CI: true

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: 📈 Upload test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-coverage
          path: coverage/
          retention-days: 30

      - name: 🧹 Cleanup
        if: always()
        run: |
          # Stop application
          if [ ! -z "$APP_PID" ]; then
            kill $APP_PID || true
          fi

          # Clean up test data
          mysql -h localhost -P 3307 -u root -proot_password -e "DROP DATABASE IF EXISTS skku_sfa_gallery_test;" || true

  test-matrix:
    name: 🧪 Cross-Platform Tests
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['20.x', '22.x']
      fail-fast: false

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: 🧪 Run health check tests only
        run: npx playwright test tests/integration/api/health.test.js
        env:
          CI: true

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run security audit
        run: npm audit --audit-level=moderate

      - name: 🛡️ Run dependency check
        run: npx audit-ci --moderate

  performance-test:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: ⚡ Run performance tests
        run: |
          # Run performance-focused tests
          npx playwright test --grep="응답 시간|성능|캐싱" --reporter=json > performance-results.json
        continue-on-error: true

      - name: 📊 Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-results.json
          retention-days: 7
