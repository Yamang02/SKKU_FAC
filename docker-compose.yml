services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: skku_gallery_app
    ports:
      - "3000:3000"
    env_file:
      - .env.docker
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=mysql
      - DB_PORT=3306
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - .:/app:cached
      - /app/node_modules
      - /app/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npx nodemon src/server.js
    networks:
      - gallery_network

  test-env:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: skku_gallery_test
    ports:
      - "3001:3001" # 내부/외부 포트 일치
    env_file:
      - .env.test
    environment:
      - NODE_ENV=local-test
      - PORT=3001 # 테스트 앱이 3001 포트에서 실행
      - DB_HOST=mysql-test
      - DB_PORT=3306
      - REDIS_HOST=redis-test
      - REDIS_PORT=6379
    volumes:
      - .:/app:cached
      - /app/node_modules
      - /app/logs
    depends_on:
      mysql-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    command: npx nodemon src/server.js
    networks:
      - gallery_network

  mysql:
    image: mysql:8.0
    container_name: skku_gallery_mysql
    environment:
      MYSQL_ROOT_PASSWORD: devpassword
      MYSQL_DATABASE: skku_sfa_gallery
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    ports:
      - "3307:3306" # 로컬 3306 충돌 피해서 3307로 매핑
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pdevpassword" ]
      timeout: 20s
      retries: 10
      interval: 30s
      start_period: 30s
    networks:
      - gallery_network

  mysql-test:
    image: mysql:8.0
    container_name: skku_gallery_mysql_test
    environment:
      MYSQL_ROOT_PASSWORD: testpassword
      MYSQL_DATABASE: skku_sfa_gallery_test
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    ports:
      - "3308:3306" # 테스트용 포트
    volumes:
      # 테스트 DB 초기화 스크립트 자동 로드
      - ./scripts/sql/db/test-init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-ptestpassword" ]
      timeout: 20s
      retries: 10
      interval: 30s
      start_period: 30s
    networks:
      - gallery_network

  redis:
    image: redis:7-alpine
    container_name: skku_gallery_redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass devredispass
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "devredispass", "ping" ]
      timeout: 3s
      retries: 5
      interval: 10s
      start_period: 10s
    networks:
      - gallery_network

  redis-test:
    image: redis:7-alpine
    container_name: skku_gallery_redis_test
    ports:
      - "6380:6379" # 테스트용 포트
    command: redis-server --appendonly yes --requirepass testredispass
    volumes:
      - redis_test_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "testredispass", "ping" ]
      timeout: 3s
      retries: 5
      interval: 10s
      start_period: 10s
    networks:
      - gallery_network

volumes:
  mysql_data:
  redis_data:
  redis_test_data:


networks:
  gallery_network:
